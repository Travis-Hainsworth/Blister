function return_matrix = sensor_automation(test_interval_mm, direction, ski_inclinometer_serial, arduino_serial, force_gauge_left_serial, force_gauge_right_serial) %inclinometer_serial
            
                data_matrix = zeros(0, 4);
                stop_num=0;
                flush(ski_inclinometer_serial);
                [pitch, roll] = get_HWT905TTL_data(ski_inclinometer_serial); % for flushing the inclinometer
                assignin("base", "current_pitch", pitch);
                assignin("base", "current_roll", roll);
                kill_switch_pressed = evalin("base", "kill_switch_pressed");

                while stop_num~=42 && stop_num ~= 86 && kill_switch_pressed ~= 1
                    %collect data
                    pause(.125); 
                    flush(ski_inclinometer_serial);
                    [pitch, roll] = get_inclinometer_reading(ski_inclinometer_serial);
                    [force1, force2]=force_average(force_gauge_left_serial, force_gauge_right_serial, 1);
            
                    row_entry = [pitch, roll, force1, force2];               
                    data_matrix = [data_matrix;row_entry];
                    disp("data_matrix: ");
                    disp(data_matrix);
                                    
                    %MOVE SENSOR
                    sig = move_x_mm(-1*test_interval_mm, direction, arduino_serial);
                    disp(sig);
                    stop_num = str2double(sig);
                    kill_switch_pressed = evalin("base", "kill_switch_pressed");
                end
                return_matrix = data_matrix;
        end



        % reads force data from sensor (written by fin)
        

function ret_signal = level_force_gauges_2(desired_angle, precision, step_size, level_inclinometer_serial, arduino_serial)
            desired_angle = desired_angle + 90;
            kill_switch_pressed = evalin("base", "kill_switch_pressed");
            MOVE_FORCE_GAUGES = 24;
            
            [roll, pitch] = get_HWT905TTL_data(level_inclinometer_serial);
            assignin("base", "current_pitch", pitch);
            assignin("base", "current_roll", roll);
            
            ret_signal = 24;
            while ~(roll < (desired_angle + precision) && roll > (desired_angle - precision)) && ~(str2double(ret_signal) == 86)
                if abs(pitch - desired_angle) < 10
                    step_size = 7;
                end
                if abs(pitch - desired_angle) < 5
                    step_size = 5;
                end
                if abs(pitch - desired_angle) < 1
                    step_size = 1;
                end
                message = make_message(int2str(MOVE_FORCE_GAUGES),roll, desired_angle, precision, step_size);
                ret_signal = serial_communication(arduino_serial, message);
                [roll, pitch] = get_inclinometer_reading(level_inclinometer_serial);
                % disp(pitch);
                % disp(roll);
                kill_switch_pressed = evalin("base", "kill_switch_pressed");
            end
            flush(arduino_serial);
        end

        function res = move_force_gauges_until_desired_force_2(desired_force_left, desired_force_right, precision, step_size, arduino_serial, force_gauge_left_serial)
            ret_signal = 24;
            [force_left, force_right]=force_average(force_gauge_left_serial, force_gauge_right_serial, 1);
            kill_switch_pressed = evalin("base", "kill_switch_pressed");
            while (~(force_left > (desired_force_left-precision) && force_left < (desired_force_left+precision)) || ~(force_right > (desired_force_right-precision) && force_right < (desired_force_right+precision))) && ~(str2double(ret_signal) == 86)
                left_step = adjust_step_size(desired_force_left, force_left);
                right_step = adjust_step_size(desired_force_right, force_right);
                message = make_message(int2str(MOVE_FORCE_GAUGES), force_left, desired_force_left, precision, left_step);
                message = make_message(message, force_left, desired_force_left, precision, right_step);
                ret_signal = serial_communication(arduino_serial, message);
                [force_left, force_right]=force_average(force_gauge_left_serial, force_gauge_right_serial, 1);
                % kill_switch_pressed = evalin("base", "kill_switch_pressed");
            end
            flush(arduino_serial);
        end

        function step_size = adjust_step_size(desired, actual)
            if abs(desired - actual) < 20
                step_size = 10;
            elseif abs(desired - actual) < 10
                step_size = 5;
            elseif abs(desired - actual) < 5
                step_size = 2;
            else
                step_size = 15;
            end
            if desired < actual
                step_size = step_size * -1;
            end
        end
        
        function message = make_message(m, actual, desired, precision, step_size)
            message = m;
            if actual <= desired+precision && actual >= desired-precision % make this a fuction that takes in actual and desired, concatenates and retruns message
                  message = strcat(message,',0',',0');
            elseif actual < desired
                  message = strcat(message,',0',',',num2str(step_size)); 
            else
                  message = strcat(message,',',num2str(step_size),',0'); 
            end 
        end

#########################################################################################

function ret_signal = move_x_mm(dis_mm, dir, s)
            MOVE_X = 4;
            KILL_SWITCH_SIGNAL = 86;
            kill_switch_pressed = evalin("base", "kill_switch_pressed");
            if ~kill_switch_pressed
                serial_string = strcat(num2str(MOVE_X),",",num2str(dis_mm),",",num2str(dir));
                ret_signal = serial_communication(s, serial_string);
                if str2num(ret_signal) == KILL_SWITCH_SIGNAL
                    assignin("base","kill_switch_pressed",true);  
                end
                flush(s);
            else
                ret_signal = 86;
            end
        end

function ret_signal = move_force_gauges(left_mm, right_mm)
            MOVE_FORCE_GAUGES = 24;
            % global app.ardiuno_serial;
            KILL_SWITCH_SIGNAL = 86;

            if ~kill_switch_pressed
                serial_string = strcat(num2str(MOVE_FORCE_GAUGES),",",num2str(left_mm),",",num2str(right_mm));
                ret_signal = serial_communication( arduino_serial, serial_string);
                if str2num(ret_signal) == KILL_SWITCH_SIGNAL
                    assignin("base","kill_switch_pressed",true);  
                end
                flush(arduino_serial);
            end
        end


function ret_signal = return_to_start(s)
            MOVE_TO_START = 2;
            KILL_SWITCH_SIGNAL = 86;
            kill_switch_pressed = evalin("base", "kill_switch_pressed");
            if ~kill_switch_pressed
                serial_string = strcat(num2str(MOVE_TO_START),",0,1");
                ret_signal = serial_communication( s, serial_string);
                if str2num(ret_signal) == KILL_SWITCH_SIGNAL
                    assignin("base","kill_switch_pressed",true);  
                end
                flush(s);
            else
                ret_signal = 86;
            end
        end

 function ret_mm = get_distance_from_start(s)
            GET_CURRENT_POSITION = 14;
            serial_string = strcat(num2str(GET_CURRENT_POSITION),",0,1");
            %ret_mm = serial_communication(s, serial_string);
            custom_write( s, serial_string);
            ret_mm = custom_read( s);
            ret_mm = str2double(ret_mm);
            flush(s);
        end

function ret_signal = set_acceleration(acceleration, s)
    SET_ACCELERATION = 10;
    serial_string = strcat(num2str(SET_ACCELERATION),",",num2str(acceleration),",0");
    %ret_signal = serial_communication(s, serial_string);
    custom_write(s, serial_string);
    ret_signal = custom_read(s);
    flush(s);
end

function ret_signal = set_max_speed(max_speed,s)
    SET_MAX_SPEED = 8;
    serial_string = strcat(num2str(SET_MAX_SPEED),",",num2str(max_speed),",0");
    %ret_signal = serial_communication(s, serial_string);
    custom_write(s, serial_string);
    ret_signal = custom_read(s);
    flush(s);
end

function ret_signal = reset_arduino(s)
    RESET_ARDUINO = 16;
    serial_string = strcat(num2str(RESET_ARDUINO),",0,0");
    custom_write(s, serial_string);
    ret_signal = custom_read(s);
    flush(s);
end

function ret_signal = set_current_position(pos,s)
    SET_CURRENT_POS = 6;
    serial_string = strcat(num2str(SET_CURRENT_POS),",",num2str(pos),",0");
    %ret_signal = serial_communication(s, serial_string);
    custom_write(s, serial_string);
    ret_signal = custom_read(s);
    flush(s);
end

function sig = serial_communication(s, message)
            custom_write( s,message);
            pause(1);
            disp("wait");
            waitfor(s, "NumBytesAvailable");
            sig = custom_read( s);
            if(str2double(sig) == 86)
                assignin('base', 'kill_switch_pressed', true);
            end
        end


        function custom_write(s, message)
            flush(s);
            writeline(s, message);
        end

        function out = custom_read(s)
            out = readline(s);
            flush(s);
        end


###################################################

function [force1,force2] = force_data(serial1,serial2)
            %connects and reads first sensor
            %serial1=serialport(portname1,9600); %connects to serial port 
            write(serial1,'?','string');        %queries serial port (required to obtain data)
            force1=read(serial1,5,"string");    %reads data point
        
            %connects and read second sensor
            %serial2=serialport(portname2,9600); %connects to serial port
            write(serial2,'?','string');        %queries serial port (required to obtain data)
            force2=read(serial2,5,"string");    %reads data point
        
            %converts and outputs data for first sensor
            force1=strrep(force1,' ','');       %removes any spaces in read data
            force1=strrep(force1,'l','1');      %changes L to 1 (weird data read)
            force1=str2double(force1);          %converts data to double
        
            %converts and outputs data for second sensor
            force2=strrep(force2,' ','');       %removes any spaces in read data
            force2=strrep(force2,'l','1');      %changes L to 1 (weird data read)
            force2=str2double(force2);          %converts data to double
            flush(serial1);
            flush(serial2);
        end
        
        % gets the average force data (written by fin)
        function [force1,force2] = force_average(ser1, ser2,average)  
            for i=1:average
                [force1(i),force2(i)]=force_data(ser1,ser2);
            end
            force1=mean(force1);
            force2=mean(force2);
        end

function [new_pitch, new_roll] = get_inclinometer_reading(serial)
            current_pitch = evalin("base", "current_pitch");
            current_roll = evalin("base", "current_roll");
            same_point = true;
            [new_pitch, new_roll] = get_HWT905TTL_data( serial);
            while same_point
                [new_pitch, new_roll] = get_HWT905TTL_data( serial);
                if ~(current_pitch == new_pitch || current_roll == new_roll)
                  same_point = false;
                end
            end
            assignin("base", "current_pitch", new_pitch);
            assignin("base", "current_roll", new_roll);
        end



function [pitch, roll] = get_HWT905TTL_data(port)
            f = 20;%DataFrequce
            aa=[0 0 0];
            ww=[0 0 0];
            AA = [0 0 0];
            t=0;
            tt = 0;
            a=[0 0 0]';
            w=[0 0 0]';
            A=[0 0 0]';
            while(1)
                Head = read(port,2,'uint8')';
                if (Head(1)==uint8(85))
                    switch(Head(2))
                        case 81 
                            a = read(port,3,'int16')'/32768*16 ;     
                            End = read(port,3,'uint8')';
                        case 82 
                            w = read(port,3,'int16')'/32768*2000 ;    
                            End = read(port,3,'uint8')';
                        case 83 
                            A = read(port,3,'int16')'/32768*180;
                            aa=[aa;a'];
                            ww = [ww;w'];
                            AA = [AA;A'];
                            tt = [tt;t];
                            pitch = A(2);
                            roll = A(1);
                            if (size(aa,1)>5*f)%clear history data
                                aa = aa(f:5*f,:);
                                ww = ww(f:5*f,:);
                                AA = AA(f:5*f,:);
                                tt = tt(f:5*f,:);
                            end
            
                            t=t+0.10;
                            End = read(port,3,'uint8')';
                            break
                    end    
                end
            end
            disp("pitch: ");
            disp(pitch);
            disp("roll: ");
            disp(roll);
            flush(port);
        end