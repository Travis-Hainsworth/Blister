clc
clear
close all



%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Mocap %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mocap = readmatrix('/Users/jacobvogel/Desktop/Blister Labs/GitHub/Blister/Wheel_Deflection/0_Data/DTS 2-10-23 Tire On/Optitrack Data/DTS700lbf.csv');
mocap = mocap(7:end,:);

%need to find MTS head column
[MAX,I] = max(mocap(8,1:end));
Pert = [mocap(8,4:3:end)];

%takes the max out of the array
for i = 1:4
    if Pert(1,i) == MAX
        Pert(1,i) = 0;
    end
end

%Finds new max, which is the top of the rim and then sets it to zero.
%Also scales it to the correct size
[MidHigh,RimTop] = max(Pert);
Pert(RimTop) = 0;
RimTop = (RimTop-1)*3+4;

%Newest max is now the center marker, which is then scaled.
[MidLow,Center] = max(Pert);
Center = (Center-1)*3+4;

% Pull out the head marker height (y-axis), offset it to zero, and invert
% to match MTS orientation
mo_head_height = mocap(:,I);
mo_head_height = mo_head_height - mo_head_height(1);
mo_head_height = -mo_head_height;

% Find where the height starts to move (this is when the MTS test begins)
thresh = 0.05; % mm
starting_index = find(mo_head_height > thresh, 1);

% Find where compression ends
peak_height = max(mo_head_height);
thresh = .025;

index_of_top_height = find(mo_head_height > peak_height-thresh, 1);

% Now trim all of the mocap data based on these bounds
mocap = mocap(starting_index:index_of_top_height,:);

%%

[mocap, RimTop, Center, I] = cleanMocapData('/Users/jacobvogel/Desktop/Blister Labs/GitHub/Blister/Wheel_Deflection/0_Data/DTS 2-10-23 Tire On/Optitrack Data/DTS700lbf.csv');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MTS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MTS = readmatrix('/Users/jacobvogel/Desktop/Blister Labs/GitHub/Blister/Wheel_Deflection/0_Data/DTS 2-10-23 Tire On/MTS Data/DTS700lbf_MTS_2-10.csv');
MTS = MTS(7:end,:);
MTS_time = MTS(:,3);
MTS_height = MTS(:,1);
MTS_load = MTS(:,2);

% I want our test to start at 0,0
MTS_height = MTS_height - MTS_height(1);
MTS_time = MTS_time - MTS_time(1);

%%
filePath = '/Users/jacobvogel/Desktop/Blister Labs/GitHub/Blister/Wheel_Deflection/0_Data/DTS 2-10-23 Tire On/Optitrack Data/';
filePathMocap = strcat(filePath, 'DTS700lbf.csv');
filePathMTS = strcat(filePath, 'DTS700lbf_MTS_2-10.csv');

[mocap, RimTop, Center, I] = cleanMocapData(filePathMocap);
[MTS, MTS_time, MTS_height, MTS_load] = cleanMTSData(filePathMTS);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Sync Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% If we want a force v displacement graph then we need the mocap data to
% have the same sampling frequency as the MTS (plot(MTS load vs mocap
% height)
%
% Mocap has more data points
ratio = size(mocap,1) / length(MTS_time);

mocap_synced = mocap(1:ratio:end,:);


%%%%%%%%%%%%%%%%%%%%%%%%%% Extract Useful Markers %%%%%%%%%%%%%%%%%%%%%%%%%
mo_time = mocap_synced(:,2);

%need to sort these depending on how the excel file was saved
m_head = mocap_synced(:,I-1:I+1);

m_rim_top = mocap_synced(:,RimTop-1:RimTop+1);
m_axle = mocap_synced(:,Center-1:Center+1);


%%%%%%%%%%%%%%%%%%%%%%%%%% Radial Compression Calcs %%%%%%%%%%%%%%%%%%%%%%%
radial_vector = m_axle - m_rim_top;
radial_length = sqrt(sum(radial_vector.^2 , 2));
radial_compression = radial_length - radial_length(1);

% The data is pretty noisy, so I'm going to do a moving mean smoothing
% filter
radial_compression = movmean(radial_compression, 50);

% TO DO: get slow mow vid of test and see why this is happening! 
%   Ideas:
%       Perhaps it is vibrating as we contact different knobs of the tread
%       Vibrating from squishing into that mucked up pillow block
%       Vibrations from the machine's feedback loop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Plots %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure
subplot(1,2,1)
plot(MTS_time,radial_compression)
title('Radial Compression')
xlabel('Time')
ylabel('Compression (mm)')

subplot(1,2,2)
plot(MTS_load, radial_compression)
title('Load vs Deflection')
xlabel('Load (lbs)')
ylabel('Compression (mm)')



figure
subplot(1,2,1)
plot(MTS_time, radial_compression*0.0393701)
title('For Greg: Radial Compression')
xlabel('Time')
ylabel('Compression (in)')

subplot(1,2,2)
plot(MTS_load, radial_compression*0.0393701)
title('For Greg: Load vs Deflection')
xlabel('Load (lbs)')
ylabel('Compression (in)')